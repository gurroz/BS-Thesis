// generated 2009/4/2 20:48:24 CLT by rvalenzu@rvalenzu-laptop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/rvalenzu/memoria/Aplicacion/TreeGrowthSimulator/AUV_selector.glade
// for gtk 2.12.9 and gtkmm 2.12.5
//
// Please modify the corresponding derived classes in ./src/GUI_AUVSelector.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
//#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "GUI_AUVSelector_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/adjustment.h>
#include <iostream>
using namespace std;

GUI_AUVSelector_glade::GUI_AUVSelector_glade() :
 Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  GUI_AUVSelector = this;
   gmm_data = new GlademmData(get_accel_group());

    int N = 11;
    /*string names[] = {"Upper lip raiser",
                         "Lip stretcher",
                         "Brow lowerer",
                         "Outer brow raiser",
                         "Eyes closed",
                         "Lid tightener",
                         "Nose wrinkler",
                         "Lip presser",
                         "Upper lid raiser",
                         "Jaw drop",
                         "Lip corner depressor"};*/
    string names[] = {"Upper lip raiser",
                         "Jaw drop",
                         "Lip stretcher",
                         "Brow lowerer",
                         "Lip corner depressor",
                         "Outer brow raiser",
                         "Eyes closed",
                         "Lid tightener",
                         "Nose wrinkler",
                         "Lip presser",
                         "Upper lid raiser"};

    things = new ScalesForParameters(names, N);


   GUI_AUVSelector->set_size_request(250,560);
   GUI_AUVSelector->grab_focus();
   GUI_AUVSelector->set_title(("Action Units"));
   GUI_AUVSelector->set_default_size(250,560);
   GUI_AUVSelector->set_modal(false);
   GUI_AUVSelector->property_window_position().set_value(Gtk::WIN_POS_NONE);
   GUI_AUVSelector->set_resizable(false);
   GUI_AUVSelector->property_destroy_with_parent().set_value(true);
   GUI_AUVSelector->add(*things);


   GUI_AUVSelector->set_keep_above(true);

   things->signal_value_changed_connect<GUI_AUVSelector_glade>(this, &GUI_AUVSelector_glade::on_hscale_value_changed);
   things->show();

   this->signal_hide().connect(sigc::mem_fun(*this, &GUI_AUVSelector_glade::on_cerrar_activate), false);

}

GUI_AUVSelector_glade::~GUI_AUVSelector_glade()
{  delete gmm_data;

    delete things;
}
