// generated 2009/5/21 18:32:37 CLT by rvalenzu@rvalenzu-laptop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/rvalenzu/zzzz/cppp/FaceMatcher.glade
// for gtk 2.12.9 and gtkmm 2.12.5
//
// Please modify the corresponding derived classes in ./src/GUIFaceMatcher.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
//#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "GUIFaceMatcher_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/adjustment.h>
#include "ScalesForParameters.h"
#include <iostream>
using namespace std;

GUIFaceMatcher_glade::GUIFaceMatcher_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  GUIFaceMatcher = this;
   gmm_data = new GlademmData(get_accel_group());

   Gtk::Adjustment *scale_x_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_x = Gtk::manage(new class Gtk::HScale(*scale_x_adj));
   label_x = Gtk::manage(new class Gtk::Label(("X Axis")));
   Gtk::Adjustment *scale_y_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_y = Gtk::manage(new class Gtk::HScale(*scale_y_adj));
   label_y = Gtk::manage(new class Gtk::Label(("Y Axis")));
   Gtk::Adjustment *scale_z_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_z = Gtk::manage(new class Gtk::VScale(*scale_z_adj));

   table_xy = Gtk::manage(new class Gtk::Table(2, 2, false));


   label_rotx = Gtk::manage(new class Gtk::Label(("Rotation X")));
   label_roty = Gtk::manage(new class Gtk::Label(("Rotation Y")));
   label_rotz = Gtk::manage(new class Gtk::Label(("Rotation Z")));
   Gtk::Adjustment *scale_rotz_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_rotz = Gtk::manage(new class Gtk::HScale(*scale_rotz_adj));
   Gtk::Adjustment *scale_roty_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_roty = Gtk::manage(new class Gtk::HScale(*scale_roty_adj));
   Gtk::Adjustment *scale_rotx_adj = Gtk::manage(new class Gtk::Adjustment(0, -5, 5, 0, 0, 0));
   scale_rotx = Gtk::manage(new class Gtk::HScale(*scale_rotx_adj));

   table_xyz = Gtk::manage(new class Gtk::Table(2, 2, false));

   main_table = Gtk::manage(new class Gtk::Table(2, 2, false));

   image210 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-add"), Gtk::IconSize(4)));
   button_add = Gtk::manage(new class Gtk::Button());

   Gtk::Adjustment *vscale_zoom_adj = Gtk::manage(new class Gtk::Adjustment(1, 0, 2, 0, 0, 0));
   vscale_zoom = Gtk::manage(new class Gtk::VScale(*vscale_zoom_adj));
   image211 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-remove"), Gtk::IconSize(4)));
   button_remove = Gtk::manage(new class Gtk::Button());
   vbox_zoom = Gtk::manage(new class Gtk::VBox(false, 0));

   hboxDrawings = Gtk::manage(new class Gtk::HPaned());
   hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));






   image6 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-open"), Gtk::IconSize(4)));
   label6 = Gtk::manage(new class Gtk::Label(("Open Configuration"), true));
   hbox6 = Gtk::manage(new class Gtk::HBox(false, 2));
   alignment6 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   open_configuration1 = Gtk::manage(new class Gtk::Button());

   image7 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-save"), Gtk::IconSize(4)));
   label7 = Gtk::manage(new class Gtk::Label(("Save Configuration"), true));
   hbox7 = Gtk::manage(new class Gtk::HBox(false, 2));
   alignment7 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   save_configuration1 = Gtk::manage(new class Gtk::Button());

   image2 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-cancel"), Gtk::IconSize(4)));
   label2 = Gtk::manage(new class Gtk::Label(("Cancel"), true));
   hbox2 = Gtk::manage(new class Gtk::HBox(false, 2));
   alignment2 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   button2 = Gtk::manage(new class Gtk::Button());

   image3 = Gtk::manage(new class Gtk::Image(Gtk::StockID("gtk-yes"), Gtk::IconSize(4)));
   label3 = Gtk::manage(new class Gtk::Label(("OK"), true));
   hbox3 = Gtk::manage(new class Gtk::HBox(false, 2));
   alignment3 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 0, 0));
   button3 = Gtk::manage(new class Gtk::Button());

   hbuttonbox1 = Gtk::manage(new class Gtk::HButtonBox(Gtk::BUTTONBOX_END, 10));
   vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));








   string names[] = {
            "Head height",
            "Eyebrows vertical pos",
            "Eyes vertical pos",
            "Eyes, width",
            "Eyes, height",
            "Eye separation dist",
            "Cheeks z",
            "Nose z-extension",
            "Nose vertical pos",
            "Nose, pointing up",
            "Mouth vertical pos",
            "Mouth width",
            "Eyes vertical diff",
            "Chin width",
            "Lip corner depressor"};


   parameters = new ScalesForParameters(names, 15, false);


   label_x->set_alignment(0.03,0.49);
   label_x->set_padding(0,0);
   label_x->set_justify(Gtk::JUSTIFY_CENTER);
   label_x->set_line_wrap(false);
   label_x->set_use_markup(false);
   label_x->set_selectable(false);
   label_y->set_alignment(0.03,0.5);
   label_y->set_padding(0,0);
   label_y->set_justify(Gtk::JUSTIFY_CENTER);
   label_y->set_line_wrap(false);
   label_y->set_use_markup(false);
   label_y->set_selectable(false);

   scale_x->set_size_request(30,30);
   scale_x->set_flags(Gtk::CAN_FOCUS);
   scale_x->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_x->set_inverted(false);
   scale_x->set_digits(1);
   scale_x->set_draw_value(false);
   scale_x->set_value_pos(Gtk::POS_TOP);
   scale_y->set_size_request(30,30);
   scale_y->set_flags(Gtk::CAN_FOCUS);
   scale_y->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_y->set_inverted(false);
   scale_y->set_digits(1);
   scale_y->set_draw_value(false);
   scale_y->set_value_pos(Gtk::POS_TOP);
   scale_z->set_size_request(30,54);
   scale_z->set_flags(Gtk::CAN_FOCUS);
   scale_z->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_z->set_inverted(true);
   scale_z->set_digits(1);
   scale_z->set_draw_value(false);
   scale_z->set_value_pos(Gtk::POS_TOP);


   image210->set_alignment(0.5,0.5);
   image210->set_padding(0,0);
   button_add->set_flags(Gtk::CAN_FOCUS);
   button_add->set_relief(Gtk::RELIEF_NORMAL);
   button_add->add(*image210);
   vscale_zoom->set_flags(Gtk::CAN_FOCUS);
   vscale_zoom->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   vscale_zoom->set_inverted(true);
   vscale_zoom->set_digits(2);
   vscale_zoom->set_draw_value(false);
   vscale_zoom->set_value_pos(Gtk::POS_TOP);
   image211->set_alignment(0.5,0.5);
   image211->set_padding(0,0);
   button_remove->set_flags(Gtk::CAN_FOCUS);
   button_remove->set_relief(Gtk::RELIEF_NORMAL);
   button_remove->add(*image211);
   vbox_zoom->pack_start(*button_add, Gtk::PACK_SHRINK, 0);
   vbox_zoom->pack_start(*vscale_zoom);
   vbox_zoom->pack_start(*button_remove, Gtk::PACK_SHRINK, 0);

   hbox1->pack_start(*vbox_zoom, Gtk::PACK_SHRINK, 0); //Scale1 scale2
   hbox1->pack_start(*hboxDrawings);
   hbox1->pack_start(*scale_z, Gtk::PACK_SHRINK, 0);


   table_xy->set_row_spacings(0);
   table_xy->set_col_spacings(0);
   table_xy->attach(*scale_x, 0, 1, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   table_xy->attach(*label_x, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_xy->attach(*label_y, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_xy->attach(*scale_y, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   label_rotx->set_alignment(0,0.5);
   label_rotx->set_padding(0,0);
   label_rotx->set_justify(Gtk::JUSTIFY_CENTER);
   label_rotx->set_line_wrap(false);
   label_rotx->set_use_markup(false);
   label_rotx->set_selectable(false);
   label_roty->set_alignment(0,0.5);
   label_roty->set_padding(0,0);
   label_roty->set_justify(Gtk::JUSTIFY_CENTER);
   label_roty->set_line_wrap(false);
   label_roty->set_use_markup(false);
   label_roty->set_selectable(false);
   label_rotz->set_alignment(0,0.5);
   label_rotz->set_padding(0,0);
   label_rotz->set_justify(Gtk::JUSTIFY_CENTER);
   label_rotz->set_line_wrap(false);
   label_rotz->set_use_markup(false);
   label_rotz->set_selectable(false);
   scale_rotz->set_flags(Gtk::CAN_FOCUS);
   scale_rotz->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_rotz->set_inverted(false);
   scale_rotz->set_digits(1);
   scale_rotz->set_draw_value(false);
   scale_rotz->set_value_pos(Gtk::POS_TOP);
   scale_roty->set_flags(Gtk::CAN_FOCUS);
   scale_roty->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_roty->set_inverted(false);
   scale_roty->set_digits(1);
   scale_roty->set_draw_value(false);
   scale_roty->set_value_pos(Gtk::POS_TOP);
   scale_rotx->set_flags(Gtk::CAN_FOCUS);
   scale_rotx->set_update_policy(Gtk::UPDATE_CONTINUOUS);
   scale_rotx->set_inverted(false);
   scale_rotx->set_digits(1);
   scale_rotx->set_draw_value(false);
   scale_rotx->set_value_pos(Gtk::POS_TOP);
   table_xyz->set_row_spacings(0);
   table_xyz->set_col_spacings(0);
   table_xyz->attach(*label_rotx, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_xyz->attach(*label_roty, 1, 2, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_xyz->attach(*label_rotz, 2, 3, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table_xyz->attach(*scale_rotz, 2, 3, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table_xyz->attach(*scale_roty, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::FILL, 0, 0);
   table_xyz->attach(*scale_rotx, 0, 1, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   main_table->set_row_spacings(0);
   main_table->set_col_spacings(0);
   main_table->attach(*hbox1, 0, 1, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::EXPAND|Gtk::FILL, 0, 0);
   main_table->attach(*parameters, 1, 2, 0, 1, Gtk::FILL, Gtk::FILL, 0, 0);
   main_table->attach(*table_xy, 0, 1, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);
   main_table->attach(*table_xyz, 1, 2, 1, 2, Gtk::FILL, Gtk::FILL, 0, 0);


   image2->set_alignment(0.5,0.5);
   image2->set_padding(0,0);
   label2->set_alignment(0.5,0.5);
   label2->set_padding(0,0);
   label2->set_justify(Gtk::JUSTIFY_LEFT);
   label2->set_line_wrap(false);
   label2->set_use_markup(false);
   label2->set_selectable(false);
   hbox2->pack_start(*image2, Gtk::PACK_SHRINK, 0);
   hbox2->pack_start(*label2, Gtk::PACK_SHRINK, 0);
   alignment2->add(*hbox2);
   button2->set_flags(Gtk::CAN_FOCUS);
   button2->set_flags(Gtk::CAN_DEFAULT);
   button2->set_relief(Gtk::RELIEF_NORMAL);
   button2->add(*alignment2);

   image3->set_alignment(0.5,0.5);
   image3->set_padding(0,0);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   hbox3->pack_start(*image3, Gtk::PACK_SHRINK, 0);
   hbox3->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   alignment3->add(*hbox3);
   button3->set_flags(Gtk::CAN_FOCUS);
   button3->set_flags(Gtk::CAN_DEFAULT);
   button3->set_relief(Gtk::RELIEF_NORMAL);
   button3->add(*alignment3);


   image6->set_alignment(0.5,0.5);
   image6->set_padding(0,0);
   label6->set_alignment(0.5,0.5);
   label6->set_padding(0,0);
   label6->set_justify(Gtk::JUSTIFY_LEFT);
   label6->set_line_wrap(false);
   label6->set_use_markup(false);
   label6->set_selectable(false);
   hbox6->pack_start(*image6, Gtk::PACK_SHRINK, 0);
   hbox6->pack_start(*label6, Gtk::PACK_SHRINK, 0);
   alignment6->add(*hbox6);
   open_configuration1->set_flags(Gtk::CAN_FOCUS);
   open_configuration1->set_flags(Gtk::CAN_DEFAULT);
   open_configuration1->set_relief(Gtk::RELIEF_NORMAL);
   open_configuration1->add(*alignment6);

   image7->set_alignment(0.5,0.5);
   image7->set_padding(0,0);
   label7->set_alignment(0.5,0.5);
   label7->set_padding(0,0);
   label7->set_justify(Gtk::JUSTIFY_LEFT);
   label7->set_line_wrap(false);
   label7->set_use_markup(false);
   label7->set_selectable(false);
   hbox7->pack_start(*image7, Gtk::PACK_SHRINK, 0);
   hbox7->pack_start(*label7, Gtk::PACK_SHRINK, 0);
   alignment7->add(*hbox7);
   save_configuration1->set_flags(Gtk::CAN_FOCUS);
   save_configuration1->set_flags(Gtk::CAN_DEFAULT);
   save_configuration1->set_relief(Gtk::RELIEF_NORMAL);
   save_configuration1->add(*alignment7);


   hbuttonbox1->pack_start(*save_configuration1);
   hbuttonbox1->pack_start(*open_configuration1);
   hbuttonbox1->pack_start(*button2);
   hbuttonbox1->pack_start(*button3);
   vbox1->pack_start(*main_table);
   vbox1->pack_start(*hbuttonbox1, Gtk::PACK_SHRINK, 0);





   GUIFaceMatcher->set_size_request(800,450);
   //GUIFaceMatcher->set_default_size(800,450);
   GUIFaceMatcher->set_title("Match your new face with the model using the parameters");
   GUIFaceMatcher->set_modal(true);
   GUIFaceMatcher->property_window_position().set_value(Gtk::WIN_POS_CENTER_ON_PARENT);
   GUIFaceMatcher->set_resizable(true);
   GUIFaceMatcher->property_destroy_with_parent().set_value(false);
   GUIFaceMatcher->add(*vbox1);

   image210->show();
   button_add->show();
   vscale_zoom->show();
   image211->show();
   button_remove->show();
   vbox_zoom->show();
   hboxDrawings->show();
   scale_z->show();
   hbox1->show();
   parameters->show();
   scale_x->show();
   label_x->show();
   label_y->show();
   scale_y->show();
   table_xy->show();
   label_rotx->show();
   label_roty->show();
   label_rotz->show();
   scale_rotz->show();
   scale_roty->show();
   scale_rotx->show();
   table_xyz->show();
   main_table->show();


   image6->show();
   label6->show();
   hbox6->show();
   alignment6->show();
   open_configuration1->show();
   image7->show();
   label7->show();
   hbox7->show();
   alignment7->show();
   save_configuration1->show();
   image2->show();
   label2->show();
   hbox2->show();
   alignment2->show();
   button2->show();
   image3->show();
   label3->show();
   hbox3->show();
   alignment3->show();
   button3->show();
   hbuttonbox1->show();
   vbox1->show();



   open_configuration1->signal_clicked().connect(sigc::mem_fun(*this, &GUIFaceMatcher_glade::on_open_configuration1_activate), false);
   save_configuration1->signal_clicked().connect(sigc::mem_fun(*this, &GUIFaceMatcher_glade::on_save_configuration1_activate), false);

   button2->signal_clicked().connect(sigc::mem_fun(*this, &GUIFaceMatcher_glade::on_quit1_activate), false);
   button3->signal_clicked().connect(sigc::mem_fun(*this, &GUIFaceMatcher_glade::on_ok1_activate), false);

   GUIFaceMatcher->show();

}

GUIFaceMatcher_glade::~GUIFaceMatcher_glade()
{  delete gmm_data;
   delete parameters;
}
