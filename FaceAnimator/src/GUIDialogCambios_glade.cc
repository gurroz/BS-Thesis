// generated 2008/4/16 15:48:09 CLT by cristi@cristi-laptop.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /home/cristi/svn/CC69F/TreeGrowthSimulator.glade
// for gtk 2.10.11 and gtkmm 2.10.8
//
// Please modify the corresponding derived classes in ./src/GUIDialogCambios.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
#include <gtkmmconfig.h>
#if GTKMM_MAJOR_VERSION==2 && GTKMM_MINOR_VERSION>2
////#include <sigc++/compatibility.h>
#define GMM_GTKMM_22_24(a,b) b
#else //gtkmm 2.2
#define GMM_GTKMM_22_24(a,b) a
#endif //
#include "GUIDialogCambios_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/adjustment.h>
#include <gtkmm/radiobutton.h>

GUIDialogCambios_glade::GUIDialogCambios_glade(
)
{  GUIDialogCambios = this;
   gmm_data = new GlademmData(get_accel_group());
   cancelbutton3 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-cancel")));
   applybutton4 = Gtk::manage(new class Gtk::Button(Gtk::StockID("gtk-apply")));
   label19 = Gtk::manage(new class Gtk::Label("Tipo de verificaciones: "));
   comboTipoVerificacionesT = Gtk::manage(new class Gtk::Combo());
   hboxTriangulos = Gtk::manage(new class Gtk::HBox(false, 0));
   label56 = Gtk::manage(new class Gtk::Label("Tipo de verificaciones: "));
   comboTipoVerificacionesC = Gtk::manage(new class Gtk::Combo());
   hboxCuadrilateros = Gtk::manage(new class Gtk::HBox(false, 0));
   labelPorcentajeAMover = Gtk::manage(new class Gtk::Label("% a mover por paso: "));

   Gtk::Adjustment *spinbuttonPorcenjateAMover_adj = Gtk::manage(new class Gtk::Adjustment(1000, 0, 10000, 1, 10, 10));
   spinbuttonPorcenjateAMover = Gtk::manage(new class Gtk::SpinButton(*spinbuttonPorcenjateAMover_adj, 1, 0));
   label22 = Gtk::manage(new class Gtk::Label("Nº de pasos:"));

   Gtk::Adjustment *spinbuttonPasos_adj = Gtk::manage(new class Gtk::Adjustment(1, 1, 1000, 1, 10, 10));
   spinbuttonPasos = Gtk::manage(new class Gtk::SpinButton(*spinbuttonPasos_adj, 1, 0));
   table11 = Gtk::manage(new class Gtk::Table(2, 2, false));

   Gtk::RadioButton::Group _RadioBGroup_radiobuttonHastaPrimeraInconsistencia;
   radiobuttonHastaPrimeraInconsistencia = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobuttonHastaPrimeraInconsistencia, "Hasta primera inconsistencia"));
   radiobuttonMoverLibremente = Gtk::manage(new class Gtk::RadioButton(_RadioBGroup_radiobuttonHastaPrimeraInconsistencia, "Mover libremente"));
   table4 = Gtk::manage(new class Gtk::Table(2, 2, false));
   alignment3 = Gtk::manage(new class Gtk::Alignment(0.5, 0.5, 1, 1));
   label18 = Gtk::manage(new class Gtk::Label("<b>Propiedades</b>"));
   framePropiedades = Gtk::manage(new class Gtk::Frame());
   vbox2 = Gtk::manage(new class Gtk::VBox(false, 0));
   cancelbutton3->set_flags(Gtk::CAN_FOCUS);
   cancelbutton3->set_flags(Gtk::CAN_DEFAULT);
   cancelbutton3->set_relief(Gtk::RELIEF_NORMAL);
   applybutton4->set_flags(Gtk::CAN_FOCUS);
   applybutton4->set_flags(Gtk::CAN_DEFAULT);
   applybutton4->set_relief(Gtk::RELIEF_NORMAL);
   GUIDialogCambios->get_action_area()->set_size_request(450,-1);
   GUIDialogCambios->get_action_area()->property_layout_style().set_value(Gtk::BUTTONBOX_END);
   label19->set_alignment(0.5,0.5);
   label19->set_padding(0,0);
   label19->set_justify(Gtk::JUSTIFY_LEFT);
   label19->set_line_wrap(false);
   label19->set_use_markup(false);
   label19->set_selectable(false);
   comboTipoVerificacionesT->get_entry()->set_size_request(280,-1);
   comboTipoVerificacionesT->get_entry()->set_flags(Gtk::CAN_FOCUS);
   comboTipoVerificacionesT->get_entry()->set_visibility(true);
   comboTipoVerificacionesT->get_entry()->set_editable(false);
   comboTipoVerificacionesT->get_entry()->set_max_length(0);
   comboTipoVerificacionesT->get_entry()->set_text("");
   comboTipoVerificacionesT->get_entry()->set_has_frame(true);
   comboTipoVerificacionesT->get_entry()->set_activates_default(false);
   comboTipoVerificacionesT->set_size_request(300,-1);
   comboTipoVerificacionesT->set_case_sensitive(false);
   {

      const char * const items[] = { "Sin verificaciones", "Consistencia local", "Verificación por Nodos Vecinos borrando nodo", "Nodos Vecinos colapsando región", 0 };
      comboTipoVerificacionesT->set_popdown_strings(items);
   }
   comboTipoVerificacionesT->get_entry()->set_text("");
   hboxTriangulos->set_size_request(440,-1);
   hboxTriangulos->pack_start(*label19, Gtk::PACK_SHRINK, 0);
   hboxTriangulos->pack_start(*comboTipoVerificacionesT);
   label56->set_alignment(0.5,0.5);
   label56->set_padding(0,0);
   label56->set_justify(Gtk::JUSTIFY_LEFT);
   label56->set_line_wrap(false);
   label56->set_use_markup(false);
   label56->set_selectable(false);
   comboTipoVerificacionesC->get_entry()->set_size_request(280,-1);
   comboTipoVerificacionesC->get_entry()->set_flags(Gtk::CAN_FOCUS);
   comboTipoVerificacionesC->get_entry()->set_visibility(true);
   comboTipoVerificacionesC->get_entry()->set_editable(false);
   comboTipoVerificacionesC->get_entry()->set_max_length(0);
   comboTipoVerificacionesC->get_entry()->set_text("");
   comboTipoVerificacionesC->get_entry()->set_has_frame(true);
   comboTipoVerificacionesC->get_entry()->set_activates_default(false);
   comboTipoVerificacionesC->set_size_request(300,-1);
   comboTipoVerificacionesC->set_case_sensitive(false);
   {

      const char * const items[] = { "Sin verificaciones", "Nodos Vecinos colapsando región", 0 };
      comboTipoVerificacionesC->set_popdown_strings(items);
   }
   comboTipoVerificacionesC->get_entry()->set_text("");
   hboxCuadrilateros->set_size_request(440,-1);
   hboxCuadrilateros->pack_start(*label56, Gtk::PACK_SHRINK, 0);
   hboxCuadrilateros->pack_start(*comboTipoVerificacionesC);
   labelPorcentajeAMover->set_alignment(0,0.5);
   labelPorcentajeAMover->set_padding(0,0);
   labelPorcentajeAMover->set_justify(Gtk::JUSTIFY_LEFT);
   labelPorcentajeAMover->set_line_wrap(false);
   labelPorcentajeAMover->set_use_markup(false);
   labelPorcentajeAMover->set_selectable(false);
   spinbuttonPorcenjateAMover->set_size_request(66,27);
   spinbuttonPorcenjateAMover->set_flags(Gtk::CAN_FOCUS);
   spinbuttonPorcenjateAMover->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbuttonPorcenjateAMover->set_numeric(true);
   spinbuttonPorcenjateAMover->set_digits(0);
   spinbuttonPorcenjateAMover->set_wrap(false);
   label22->set_alignment(0,0.5);
   label22->set_padding(0,0);
   label22->set_justify(Gtk::JUSTIFY_LEFT);
   label22->set_line_wrap(false);
   label22->set_use_markup(false);
   label22->set_selectable(false);
   spinbuttonPasos->set_size_request(58,27);
   spinbuttonPasos->set_flags(Gtk::CAN_FOCUS);
   spinbuttonPasos->set_update_policy(Gtk::UPDATE_ALWAYS);
   spinbuttonPasos->set_numeric(false);
   spinbuttonPasos->set_digits(0);
   spinbuttonPasos->set_wrap(false);
   table11->set_size_request(203,54);
   table11->set_row_spacings(0);
   table11->set_col_spacings(0);
   table11->attach(*labelPorcentajeAMover, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table11->attach(*spinbuttonPorcenjateAMover, 1, 2, 0, 1, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table11->attach(*label22, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table11->attach(*spinbuttonPasos, 1, 2, 1, 2, Gtk::EXPAND|Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   radiobuttonHastaPrimeraInconsistencia->set_flags(Gtk::CAN_FOCUS);
   radiobuttonHastaPrimeraInconsistencia->set_relief(Gtk::RELIEF_NORMAL);
   radiobuttonHastaPrimeraInconsistencia->set_mode(true);
   radiobuttonHastaPrimeraInconsistencia->set_active(false);
   radiobuttonMoverLibremente->set_flags(Gtk::CAN_FOCUS);
   radiobuttonMoverLibremente->set_relief(Gtk::RELIEF_NORMAL);
   radiobuttonMoverLibremente->set_mode(true);
   radiobuttonMoverLibremente->set_active(false);
   table4->set_size_request(210,44);
   table4->set_row_spacings(0);
   table4->set_col_spacings(10);
   table4->attach(*radiobuttonHastaPrimeraInconsistencia, 0, 1, 0, 1, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   table4->attach(*radiobuttonMoverLibremente, 0, 1, 1, 2, Gtk::FILL, Gtk::AttachOptions(), 0, 0);
   alignment3->add(*table4);
   label18->set_alignment(0.5,0.5);
   label18->set_padding(0,0);
   label18->set_justify(Gtk::JUSTIFY_LEFT);
   label18->set_line_wrap(false);
   label18->set_use_markup(true);
   label18->set_selectable(false);
   framePropiedades->set_size_request(226,63);
   framePropiedades->set_shadow_type(Gtk::SHADOW_ETCHED_IN);
   framePropiedades->set_label_align(0,0.5);
   framePropiedades->add(*alignment3);
   framePropiedades->set_label_widget(*label18);
   vbox2->set_size_request(450,-1);
   vbox2->pack_start(*hboxTriangulos);
   vbox2->pack_start(*hboxCuadrilateros);
   vbox2->pack_start(*table11);
   vbox2->pack_start(*framePropiedades);
   GUIDialogCambios->get_vbox()->set_size_request(455,-1);
   GUIDialogCambios->get_vbox()->set_homogeneous(false);
   GUIDialogCambios->get_vbox()->set_spacing(0);
   GUIDialogCambios->get_vbox()->pack_start(*vbox2);
   GUIDialogCambios->set_size_request(420,-1);
   GUIDialogCambios->set_title("Cambios");
   GUIDialogCambios->set_modal(false);
   GUIDialogCambios->property_window_position().set_value(Gtk::WIN_POS_NONE);
   GUIDialogCambios->set_resizable(true);
   GUIDialogCambios->property_destroy_with_parent().set_value(false);
   GUIDialogCambios->set_has_separator(true);
   GUIDialogCambios->add_action_widget(*cancelbutton3, -6);
   GUIDialogCambios->add_action_widget(*applybutton4, -10);
   cancelbutton3->show();
   applybutton4->show();
   label19->show();
   comboTipoVerificacionesT->show();
   hboxTriangulos->show();
   label56->show();
   comboTipoVerificacionesC->show();
   hboxCuadrilateros->show();
   labelPorcentajeAMover->show();
   spinbuttonPorcenjateAMover->show();
   label22->show();
   spinbuttonPasos->show();
   table11->show();
   radiobuttonHastaPrimeraInconsistencia->show();
   radiobuttonMoverLibremente->show();
   table4->show();
   alignment3->show();
   label18->show();
   vbox2->show();
   GUIDialogCambios->show();
   comboTipoVerificacionesT->get_entry()->signal_changed().connect(sigc::mem_fun(*this, &GUIDialogCambios_glade::on_comboTipoVerificaciones_changed), false);
   radiobuttonHastaPrimeraInconsistencia->signal_toggled().connect(sigc::mem_fun(*this, &GUIDialogCambios_glade::on_radiobuttonHastaPrimeraInconsistencia_toggled), false);
   radiobuttonMoverLibremente->signal_toggled().connect(sigc::mem_fun(*this, &GUIDialogCambios_glade::on_radiobuttonMoverLibremente_toggled), false);
}

GUIDialogCambios_glade::~GUIDialogCambios_glade()
{  delete gmm_data;
}
